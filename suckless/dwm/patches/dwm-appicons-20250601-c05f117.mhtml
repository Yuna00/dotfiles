From: <Saved by Blink>
Snapshot-Content-Location: http://dwm.suckless.org/patches/appicons/dwm-appicons-20250601-c05f117.diff
Subject: 
Date: Sun, 10 Aug 2025 09:42:29 +0200
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--oPuR6qlduhPLfwn8A9TajYQjiVzOjhagZn3lMV61KN----"


------MultipartBoundary--oPuR6qlduhPLfwn8A9TajYQjiVzOjhagZn3lMV61KN----
Content-Type: text/html
Content-ID: <frame-681F4A255BC6B4FD757322204C9DC68E@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: http://dwm.suckless.org/patches/appicons/dwm-appicons-20250601-c05f117.diff

<html><head><meta http-equiv=3D"Content-Type" content=3D"text/html; charset=
=3Dwindows-1252"><link rel=3D"stylesheet" type=3D"text/css" href=3D"cid:css=
-b4169200-e3c1-4f6c-826d-ea18e42da57b@mhtml.blink" /><meta name=3D"color-sc=
heme" content=3D"light dark"></head><body><pre style=3D"word-wrap: break-wo=
rd; white-space: pre-wrap;">From c0fcc16b38f41a0ae7638c5ed5718f5aa9747913 M=
on Sep 17 00:00:00 2001
From: Rumen &lt;rumenmitov@protonmail.com&gt;
Date: Sun, 1 Jun 2025 12:23:04 +0200
Subject: [PATCH] fix: segfault when rendering icons

fixed a segfault due to a double free when copying appicons between
strings
---
 config.def.h |  14 ++++--
 dwm.c        | 140 +++++++++++++++++++++++++++++++++++++++++++++++++--
 2 files changed, 147 insertions(+), 7 deletions(-)

diff --git a/config.def.h b/config.def.h
index 9efa774..3045af6 100644
--- a/config.def.h
+++ b/config.def.h
@@ -21,14 +21,22 @@ static const char *colors[][3]      =3D {
 /* tagging */
 static const char *tags[] =3D { "1", "2", "3", "4", "5", "6", "7", "8", "9=
" };
=20
+/* appicons */
+/* NOTE: set to 0 to set to default (whitespace) */
+static char outer_separator_beg      =3D '[';
+static char outer_separator_end      =3D ']';
+static char inner_separator          =3D ' ';
+static unsigned truncate_icons_after =3D 2; /* will default to 1, that is =
the min */
+static char truncate_symbol[]         =3D "...";
+
 static const Rule rules[] =3D {
 	/* xprop(1):
 	 *	WM_CLASS(STRING) =3D instance, class
 	 *	WM_NAME(STRING) =3D title
 	 */
-	/* class      instance    title       tags mask     isfloating   monitor =
*/
-	{ "Gimp",     NULL,       NULL,       0,            1,           -1 },
-	{ "Firefox",  NULL,       NULL,       1 &lt;&lt; 8,       0,           -1=
 },
+	/* class      instance    title       tags mask     isfloating   monitor =
  appicon*/
+	{ "Gimp",     NULL,       NULL,       0,            1,           -1,     =
    NULL },
+	{ "Firefox",  NULL,       NULL,       1 &lt;&lt; 8,       0,           -1=
,         "=F3=B0=88=B9"  },
 };
=20
 /* layout(s) */
diff --git a/dwm.c b/dwm.c
index 1443802..4fe7a6d 100644
--- a/dwm.c
+++ b/dwm.c
@@ -85,6 +85,7 @@ typedef struct Monitor Monitor;
 typedef struct Client Client;
 struct Client {
 	char name[256];
+    char *appicon;
 	float mina, maxa;
 	int x, y, w, h;
 	int oldx, oldy, oldw, oldh;
@@ -121,6 +122,7 @@ struct Monitor {
 	unsigned int seltags;
 	unsigned int sellt;
 	unsigned int tagset[2];
+    char **tag_icons;
 	int showbar;
 	int topbar;
 	Client *clients;
@@ -138,6 +140,7 @@ typedef struct {
 	unsigned int tags;
 	int isfloating;
 	int monitor;
+    const char *appicon;
 } Rule;
=20
 /* function declarations */
@@ -160,6 +163,9 @@ static void destroynotify(XEvent *e);
 static void detach(Client *c);
 static void detachstack(Client *c);
 static Monitor *dirtomon(int dir);
+static void remove_outer_separators(char **str);
+static void appiconsappend(char **str, const char *appicon, size_t new_siz=
e);
+static void applyappicon(char *tag_icons[], int *icons_per_tag, const Clie=
nt *c);
 static void drawbar(Monitor *m);
 static void drawbars(void);
 static void enternotify(XEvent *e);
@@ -283,7 +289,13 @@ applyrules(Client *c)
 	Monitor *m;
 	XClassHint ch =3D { NULL, NULL };
=20
+    outer_separator_beg =3D outer_separator_beg ? outer_separator_beg : ' =
';
+    outer_separator_end =3D outer_separator_end ? outer_separator_end : ' =
';
+    inner_separator =3D inner_separator ? inner_separator : ' ';
+    truncate_icons_after =3D truncate_icons_after &gt; 0 ? truncate_icons_=
after : 1;
+
 	/* rule matching */
+    c-&gt;appicon =3D NULL;
 	c-&gt;isfloating =3D 0;
 	c-&gt;tags =3D 0;
 	XGetClassHint(dpy, c-&gt;win, &amp;ch);
@@ -296,6 +308,8 @@ applyrules(Client *c)
 		&amp;&amp; (!r-&gt;class || strstr(class, r-&gt;class))
 		&amp;&amp; (!r-&gt;instance || strstr(instance, r-&gt;instance)))
 		{
+            /* r-&gt;appicon is static, so lifetime is sufficient */
+            c-&gt;appicon =3D (char*) r-&gt;appicon;=20
 			c-&gt;isfloating =3D r-&gt;isfloating;
 			c-&gt;tags |=3D r-&gt;tags;
 			for (m =3D mons; m &amp;&amp; m-&gt;num !=3D r-&gt;monitor; m =3D m-&gt=
;next);
@@ -433,7 +447,7 @@ buttonpress(XEvent *e)
 	if (ev-&gt;window =3D=3D selmon-&gt;barwin) {
 		i =3D x =3D 0;
 		do
-			x +=3D TEXTW(tags[i]);
+			x +=3D TEXTW(m-&gt;tag_icons[i]);
 		while (ev-&gt;x &gt;=3D x &amp;&amp; ++i &lt; LENGTH(tags));
 		if (i &lt; LENGTH(tags)) {
 			click =3D ClkTagBar;
@@ -508,6 +522,14 @@ cleanupmon(Monitor *mon)
 	}
 	XUnmapWindow(dpy, mon-&gt;barwin);
 	XDestroyWindow(dpy, mon-&gt;barwin);
+
+    for (int i =3D 0; i &lt; LENGTH(tags); i++) {
+        if (mon-&gt;tag_icons[i]) free(mon-&gt;tag_icons[i]);
+        mon-&gt;tag_icons[i] =3D NULL;
+    }
+
+    if (mon-&gt;tag_icons) free(mon-&gt;tag_icons);
+
 	free(mon);
 }
=20
@@ -643,6 +665,13 @@ createmon(void)
 	m-&gt;lt[0] =3D &amp;layouts[0];
 	m-&gt;lt[1] =3D &amp;layouts[1 % LENGTH(layouts)];
 	strncpy(m-&gt;ltsymbol, layouts[0].symbol, sizeof m-&gt;ltsymbol);
+
+    m-&gt;tag_icons =3D (char**) malloc(LENGTH(tags) * sizeof(char*));
+    if (m-&gt;tag_icons =3D=3D NULL) perror("dwm: malloc()");
+    for (int i =3D 0; i &lt; LENGTH(tags); i++) {
+        m-&gt;tag_icons[i] =3D NULL;
+    }
+
 	return m;
 }
=20
@@ -694,6 +723,96 @@ dirtomon(int dir)
 	return m;
 }
=20
+void
+remove_outer_separators(char **str)
+{
+    size_t clean_tag_name_len =3D strlen(*str) - 2;
+
+    char *temp_tag_name =3D (char*)=20
+        malloc(clean_tag_name_len + 1);
+
+    if (temp_tag_name =3D=3D NULL) perror("dwm: malloc()");
+
+    memset(temp_tag_name, 0, clean_tag_name_len + 1);
+
+    char *clean_tag_name_beg =3D *str + 1;
+    strncpy(temp_tag_name,=20
+            clean_tag_name_beg,=20
+            clean_tag_name_len);
+
+    if (*str) free(*str);
+    *str =3D temp_tag_name;
+}
+
+void
+appiconsappend(char **str, const char *appicon, size_t new_size)
+{
+    char *temp_tag_name =3D (char*) malloc(new_size);
+    if (temp_tag_name =3D=3D NULL) perror("dwm: malloc()");
+
+    /* NOTE: Example format of temp_tag_name (with two appicons):
+     *  &lt;outer_sep_beg&gt;&lt;appicon&gt;&lt;inner_sep&gt;&lt;appicon&g=
t;&lt;outer_sep_end&gt;
+     */
+    temp_tag_name =3D memset(temp_tag_name, 0, new_size);
+
+    temp_tag_name[0] =3D outer_separator_beg;
+    temp_tag_name[new_size - 2] =3D outer_separator_end;
+
+    strncpy(temp_tag_name + 1, *str, strlen(*str));
+    temp_tag_name[strlen(temp_tag_name)] =3D inner_separator;
+
+    strncpy(temp_tag_name + strlen(temp_tag_name),
+            appicon, strlen(appicon));
+
+    if (*str) free(*str);
+    *str =3D temp_tag_name;
+}
+
+void
+applyappicon(char *tag_icons[], int *icons_per_tag, const Client *c)
+{
+    for (unsigned t =3D 1, i =3D 0;
+            i &lt; LENGTH(tags);
+            t &lt;&lt;=3D 1, i++)=20
+    {
+        if (c-&gt;tags &amp; t) {
+          if (icons_per_tag[i] =3D=3D 0) {
+                if (tag_icons[i]) free(tag_icons[i]);
+                tag_icons[i] =3D strndup(c-&gt;appicon, strlen(c-&gt;appic=
on));
+          } else {
+                char *icon =3D NULL;
+                if (icons_per_tag[i] &lt; truncate_icons_after)
+                    icon =3D c-&gt;appicon;
+                else if (icons_per_tag[i] =3D=3D truncate_icons_after)
+                    icon =3D  truncate_symbol;
+                else {
+                    icons_per_tag[i]++;
+                    continue;
+                }
+                   =20
+                /* remove outer separators from previous iterations
+                 * otherwise they get applied recursively */
+                if (icons_per_tag[i] &gt; 1) {
+                    remove_outer_separators(&amp;tag_icons[i]);
+                }
+
+                size_t outer_separators_size =3D 2;
+                size_t inner_separator_size =3D 1;
+
+                size_t new_size =3D strlen(tag_icons[i])
+                    + outer_separators_size=20
+                    + inner_separator_size
+                    + strlen(icon)
+                    + 1;
+
+                appiconsappend(&amp;tag_icons[i], icon, new_size);
+            }
+
+            icons_per_tag[i]++;
+        }
+    }
+}
+
 void
 drawbar(Monitor *m)
 {
@@ -713,22 +832,35 @@ drawbar(Monitor *m)
 		drw_text(drw, m-&gt;ww - tw, 0, tw, bh, 0, stext, 0);
 	}
=20
+    int icons_per_tag[LENGTH(tags)];
+    memset(icons_per_tag, 0, LENGTH(tags) * sizeof(int));
+
+    for (int i =3D 0; i &lt; LENGTH(tags); i++) {
+        /* set each tag to default value */
+        m-&gt;tag_icons[i] =3D strndup(tags[i], strlen(tags[i]));
+    }
+
 	for (c =3D m-&gt;clients; c; c =3D c-&gt;next) {
+        if (c-&gt;appicon &amp;&amp; strlen(c-&gt;appicon) &gt; 0) {
+            applyappicon(m-&gt;tag_icons, icons_per_tag, c);
+        }
+
 		occ |=3D c-&gt;tags;
 		if (c-&gt;isurgent)
 			urg |=3D c-&gt;tags;
 	}
 	x =3D 0;
 	for (i =3D 0; i &lt; LENGTH(tags); i++) {
-		w =3D TEXTW(tags[i]);
+		w =3D TEXTW(m-&gt;tag_icons[i]);
 		drw_setscheme(drw, scheme[m-&gt;tagset[m-&gt;seltags] &amp; 1 &lt;&lt; i=
 ? SchemeSel : SchemeNorm]);
-		drw_text(drw, x, 0, w, bh, lrpad / 2, tags[i], urg &amp; 1 &lt;&lt; i);
-		if (occ &amp; 1 &lt;&lt; i)
+		drw_text(drw, x, 0, w, bh, lrpad / 2, m-&gt;tag_icons[i], urg &amp; 1 &l=
t;&lt; i);
+		if (occ &amp; 1 &lt;&lt; i &amp;&amp; icons_per_tag[i] =3D=3D 0)
 			drw_rect(drw, x + boxs, boxs, boxw, boxw,
 				m =3D=3D selmon &amp;&amp; selmon-&gt;sel &amp;&amp; selmon-&gt;sel-&g=
t;tags &amp; 1 &lt;&lt; i,
 				urg &amp; 1 &lt;&lt; i);
 		x +=3D w;
 	}
+
 	w =3D TEXTW(m-&gt;ltsymbol);
 	drw_setscheme(drw, scheme[SchemeNorm]);
 	x =3D drw_text(drw, x, 0, w, bh, lrpad / 2, m-&gt;ltsymbol, 0);
--=20
2.49.0

</pre></body></html>
------MultipartBoundary--oPuR6qlduhPLfwn8A9TajYQjiVzOjhagZn3lMV61KN----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-b4169200-e3c1-4f6c-826d-ea18e42da57b@mhtml.blink

@charset "windows-1252";
=0A
------MultipartBoundary--oPuR6qlduhPLfwn8A9TajYQjiVzOjhagZn3lMV61KN------
